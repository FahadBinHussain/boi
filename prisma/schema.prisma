generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(USER)
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  preferYearOnlyDateFormat Boolean  @default(true)
  encryptedFilesVcApiKey  String?
  apiKeyIv                String?
  updatedAt               DateTime @updatedAt
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Book {
  id          String    @id @default(cuid())
  title       String
  imageUrl    String?
  description String?
  summary     String?
  updatedAt   DateTime  @updatedAt
  positionInSeries Int?
  series      Series?   @relation(fields: [seriesId], references: [id])
  seriesId    String?
  authors     Author[]
}

model Series {
  id          String   @id @default(cuid())
  name        String
  description String?
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Author {
  id          String   @id @default(cuid())
  name        String
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  USER
  ADMIN
}
